baseGreenInvoiceUrl = "https://api.greeninvoice.co.il/api/v1/";
//baseGreenInvoiceUrl = "https://sandbox.d.greeninvoice.co.il/api/v1/";
greenInvoiceTokenUrl = baseGreenInvoiceUrl + "account/token";
greenInvoiceDocumentUrl = baseGreenInvoiceUrl + "documents";
currentDt = zoho.currentdate.toString('YYYY-MM-DD');
// Predefined IDs for testing
idList = list();
//Get the "id" field from the invoice object
// Check if "id" field exists and is not empty
if(invoice.contains("Invoices.ID") && invoice.get("Invoices.ID") != null)
{
	idlist = invoice.get("Invoices.ID").toList("|||");
	id_ = invoice.get("Invoices.ID");
}
// Iterate over the IDs and add them to idList
for each  id in idlist
{
	// Print each ID for debugging
	info id;
	idList.add(id);
}
// idList.add(5560261000016650001);
// idList.add(5560261000016623001);
//idList.add(5560261000015613381);
//return "Selected IDs: " + idList + " " + invoice;
if(idList.isEmpty())
{
	return "No records selected.";
}
// Step 1: Get the Green Invoice Token
tokenExpiryTimeStr = null;
API_Key_greeninvoice = zoho.crm.getOrgVariable("createinvoice1__API_Key_for_Green_Invoice");
secret_greeninvoice = zoho.crm.getOrgVariable("createinvoice1__Secret");
info "API_Key_greeninvoice: " + API_Key_greeninvoice;
info "Secret Key: " + secret_greeninvoice;
if(API_Key_greeninvoice == null || secret_greeninvoice == null)
{
	return "Error: API Key or Secret Key is missing in CRM Variables.";
}
tokenExpiryTimeStr = zoho.crm.getOrgVariable("createinvoice1__Expiry_Time").toDateTime();
info "Current Token Expiry Time from Zoho: " + tokenExpiryTimeStr;
currentDateTime = zoho.currenttime;
expiryBuffer = currentDateTime.addMinutes(2);
tokenExpiryTime = tokenExpiryTimeStr.toDateTime("yyyy-MM-dd'T'HH:mm:ss'Z'");
if(tokenExpiryTime == null)
{
	return "Error: Token Expiry Time is missing or invalid.";
}
info "Token Expiry Time from Zoho (formatted): " + tokenExpiryTime;
info "Current Time + 2 minutes: " + expiryBuffer;
authToken = null;
// Generate a new token if the current one is expired
if(expiryBuffer > tokenExpiryTime)
{
	headerMap1 = Map();
	bodyMap = Map();
	headerMap1.put("Content-Type","application/json");
	bodyMap.put("id",API_Key_greeninvoice);
	bodyMap.put("secret",secret_greeninvoice);
	response = invokeurl
	[
		url :greenInvoiceTokenUrl
		type :POST
		parameters:bodyMap.toString()
		headers:headerMap1
	];
	info "Response from Green Invoice: " + response;
	if(response == null || !response.containsKey("token"))
	{
		return "Error: Failed to generate new token from Green Invoice.";
	}
	getExpTimeStr = response.get("expires");
	getExpTime = getExpTimeStr.toLong() * 1000;
	expiryDateTime = getExpTime.toDate();
	authToken = response.get("token");
	if(authToken == null)
	{
		return "Error: Failed to retrieve authentication token.";
	}
	// Update token in Zoho CRM
	variable1 = Map();
	variable1.put("apiname","createinvoice1__Expiry_Time");
	variable1.put("value",expiryDateTime.toString("yyyy-MM-dd'T'HH:mm:ss'Z'"));
	variable2 = Map();
	variable2.put("apiname","createinvoice1__Expiry_Time1");
	variable2.put("value",authToken);
	zoho.crm.invokeConnector("crm.set",variable1);
	zoho.crm.invokeConnector("crm.set",variable2);
}
else
{
	authToken = zoho.crm.getOrgVariable("createinvoice1__Expiry_Time1");
	if(authToken == null || authToken.isEmpty())
	{
		return "Error: Existing token is missing.";
	}
	info "Using existing token: " + authToken;
}
// Step 2: Fetch invoices and generate receipt
combinedItemList = List();
clientID = List();
Grand_Total = 0.0;
currency_symbol = "ILS";
for each  id in idList
{
	dynamic_map = Map();
	dynamic_map.put("record_id",id);
	// Invoke the connector to get the invoice details
	invoice_response = zoho.crm.invokeConnector("createinvoice1.zohocrmconnect.getinvoicefromcrm",dynamic_map);
	info invoice_response;
	// Check if the response is null or does not contain a valid "response" key
	if(invoice_response == null || !invoice_response.containsKey("response"))
	{
		return "Error: No response found for record ID: " + id;
	}
	response_string = invoice_response.get("response");
	// Validate if the response is a valid JSON and convert to a map
	product_res = null;
	try 
	{
		product_res = response_string.toMap();
	}
	catch (e)
	{
		return "Error: Invalid ID  for record ID: " + id;
	}
	// Check if the response contains the "data" key
	if(!product_res.containsKey("data") || product_res.get("data") == null)
	{
		return "Error: No invoice data found for record ID: " + id;
	}
	data_list = product_res.get("data");
	// If data_list is empty, return an error
	if(data_list.isEmpty())
	{
		return "Error: No invoice details available for record ID: " + id;
	}
	first_record = data_list.get(0);
	Contact_name = first_record.get("Contact_Name");
	Invoice_Date = first_record.get("Invoice_Date");
	Due_Date = first_record.get("Due_Date");
	linked_DocumentID = first_record.get("createinvoice1__invoiceMorningID");
	if(Contact_name != null && Contact_name.getJSON("id"))
	{
		account_id = Contact_name.getJSON("id");
	}
	else
	{
		return "Error: Contact ID is missing for record ID: " + id;
	}
	acc_map = Map();
	acc_map.put("record_id",account_id);
	Contacts = zoho.crm.invokeConnector("createinvoice1.zohocrmconnect.getcontactsfromcrm1",acc_map);
	if(Contacts == null || !Contacts.containsKey("response"))
	{
		return "Error: Failed to fetch contact details for Contact ID: " + account_id;
	}
	data_con = Contacts.get("response").get("data");
	if(data_con == null || data_con.isEmpty())
	{
		return "Error: Contact data is empty for Contact ID: " + account_id;
	}
	clientID_FromCRM = data_con.get(0).get("createinvoice1__clientMorningID");
	if(clientID_FromCRM == null)
	{
		return "Error: Client ID is null in Contact Module for Contact ID: " + account_id;
	}
	clientID.add(clientID_FromCRM);
	if(linked_DocumentID == null)
	{
		return "Error: linked_DocumentID is null: ";
	}
	// Gather items
	invoiced_items = first_record.get("Invoiced_Items");
	if(invoiced_items == null)
	{
		return "Error: No invoiced items found for record ID: " + id;
	}
	for each  prod in invoiced_items
	{
		itemMap = Map();
		itemName = ifnull(prod.get("Product_Name").get("name"),".");
		productDescription = ifnull(prod.get("Description"),itemName);
		itemMap.put("catalogNum",itemName);
		itemMap.put("description",productDescription);
		itemMap.put("quantity",prod.get("Quantity"));
		itemMap.put("price",ifnull(prod.get("Net_Total"),0.01));
		itemMap.put("currency",currency_symbol);
		itemMap.put("vatRate",0);
		itemMap.put("vatType",2);
		combinedItemList.add(itemMap);
		Grand_Total = Grand_Total + ifnull(prod.get("Net_Total"),0.01);
	}
}
// Check if the client ID list is empty
if(clientID.isEmpty())
{
	return "Error: No client ID found. Cannot proceed.";
}
// Verify if all client IDs are the same
firstID = clientID.get(0);
for each  id in clientID
{
	if(id != firstID)
	{
		return "Error: Client IDs do not match. Cannot proceed.";
	}
}
client_id_greeninvoice = firstID;
response_string = invoice_response.get("response");
data_list = response_string.get("data").get(0);
Invoice_Date = data_list.get("Invoice_Date");
Due_Date = data_list.get("Due_Date");
Payment_Method = data_list.get("createinvoice1__Payment_Method");
selected_currency = data_list.get("createinvoice1__Currancy");
exchange_rate = data_list.get("createinvoice1__Exchange_Rates");
info "Invoice_Date " + Invoice_Date;
invoice_name = Contact_name.get("name");
info "inv_name " + invoice_name;
currentDt = zoho.currentdate.toString('yyyy-MM-dd');
data = Map();
getBankDetail = Map();
data.put("description",ifnull(invoice_name,""));
if(Invoice_Date != null && Invoice_Date != "")
{
	data.put("date",ifnull(currentDt,currentDt));
}
else
{
	data.put("date",currentDt);
}
if(Due_Date != null && Due_Date != "")
{
	data.put("dueDate",Due_Date.toString("yyyy-MM-dd"));
}
data.put("type",330);
data.put("lang","he");
data.put("currency",ifnull("ILS","ILS"));
data.put("vatType",0);
data.put("discount",{"type":"sum"});
data.put("rounding",false);
data.put("signed",true);
// linkedDocumentIds = List();
// linkedDocumentIds.add("8b8153d0-18c9-4dda-bf47-cfbbd3df0c8a");
// data.put("linkedDocumentIds",linkedDocumentIds);
data.put("attachment",true);
data.put("maxPayments",1);
info "clientID = " + client_id_greeninvoice;
//data.put("client",{"id":clientID_FromCRM});
data.put("client",{"id":clientID_FromCRM});
info "itemList" + combinedItemList;
data.put("income",combinedItemList);
info "combinedItemList " + combinedItemList;
if(Invoice_Date != null && Invoice_Date != "")
{
	getBankDetail.put("date",ifnull(currentDt,currentDt));
}
else
{
	getBankDetail.put("date",currentDt);
}
if(Payment_Method == 0 || Payment_Method == -1 || Payment_Method == 11)
{
	getBankDetail.put("type",1);
}
else
{
	info "	Pay_Method = " + Payment_Method;
	getBankDetail.put("type",ifnull(Payment_Method,1));
}
getBankDetail.put("price",ifnull(Grand_Total,0.0));
getBankDetail.put("currency",ifnull(selected_currency,"ILS"));
getBankDetail.put("description",ifnull(selected_currency,"ILS"));
//getBankDetail.put("currencyRate",ifnull(exchange_rate,""));
data.put("payment",getBankDetail.tolist());
info "data " + data;
headerMap = Map();
headerMap.put("Authorization","Bearer " + authToken);
headerMap.put("Content-Type","application/json");
response = invokeurl
[
	url :greenInvoiceDocumentUrl
	type :POST
	parameters:data.toString()
	headers:headerMap
];
info "Create Document Response: " + response;
document_id = response.get("id");
morning_no = response.get("number");
link_docx = response.get("url").get("origin").toString();
linkedDocumentId = response.get("id");
dynamic_map = Map();
if(linkedDocumentId != null)
{
	dynamic_map = Map();
	dynamic_map.put("Module_Name","Invoices");
	dynamic_map.put("Record_ID",id_);
	createdRecordResp = zoho.crm.invokeConnector("createinvoice1.zohocrmconnect.createrecord",dynamic_map);
	info createdRecordResp;
	finalresponse = createdRecordResp;
	if(createdRecordResp.containKey("status_code"))
	{
		status_code = createdRecordResp.get("status_code");
		info "status_code " + status_code;
		if(status_code == 201)
		{
			// Step 1: Get the string from "response"
			responseString = createdRecordResp.get("response");
			responseJSON = responseString.toMap();
			// returns a LIST of maps
			firstRecord = responseJSON.get("data").get(0);
			recordId = firstRecord.get("details").get("id");
			info recordId;
			// add attachment
			fileObject = invokeurl
			[
				url :response.get("url").get("origin").toString()
				type :GET
			];
			info fileObject;
			fileObject.getFileName();
			name = "Invoice_" + fileObject;
			fileObject.setFileName(name);
			info fileObject;
			attachFile = zoho.crm.attachFile("Invoices",recordId,fileObject);
			info "attachFile " + attachFile;
			dynamic_map = Map();
			//Map all dynamic params to your desired values 
			dynamic_map.put("Module_Name","Invoices");
			dynamic_map.put("record_id",recordId);
			dynamic_map.put("Document_Type","חשבונית זיכוי");
			dynamic_map.put("MorningID",document_id);
			dynamic_map.put("Download_Links",link_docx);
			dynamic_map.put("morningInvoiceNumber",morning_no);
			dynamic_map.put("Created_By_Button","true");
			updateRecord = zoho.crm.invokeConnector("createinvoice1.zohocrmconnect.updaterecord",dynamic_map);
			finalresponse = updateRecord;
			status_code = updateRecord.get("status_code");
			if(status_code == 200)
			{
				finalresponse = "הצלחה ☺️";
			}
			else
			{
				finalresponse = updateRecord;
			}
		}
	}
}
else
{
	finalresponse = response;
}
return finalresponse;
